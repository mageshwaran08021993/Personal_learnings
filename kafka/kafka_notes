Installations Requirement:
  - Java JDK
  - Kafka

Startup:
cd D:\kafka\kafka_src
  - start zookeeper - zookeeper-server-start.bat config\zookeeper.properties (bin\windows\zookeeper-server-start.bat config\zookeeper.properties)
  - start Kafka - kafka-server-start.bat config\server.properties (.\bin\windows\kafka-server-start.bat .\config\server.properties)
  - Create topics - kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic <topic-name> (.\bin\windows\kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test1)
  - start producer - kafka-console-producer.bat --bootstrap-server localhost:9092 --topic <topic-name> (.\bin\windows\kafka-console-producer.bat --bootstrap-server localhost:9092 --topic test1)
  - start consumer - kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic <topic-name> --from-beginning (.\bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test1 --from-beginning)


To Check the partitions
- D:\kafka\kafka_src\bin\windows\kafka-topics.bat --describe --bootstrap-server localhost:9092 --topic test1
brokers check - D:\kafka\kafka_src\bin\windows\kafka-broker-api-versions.bat --bootstrap-server localhost:9092

zookeeper/bin/zkCli.sh -server localhost:9092 

Topics:
to list topics - kafka-topics --zookeeper zookeeper:2181 --list
excluding internal topics - /bin/kafka-topics.sh --zookeeper $ZK_HOSTS --list --exclude-internal
bin/kafka-topics.sh --zookeeper $ZK_HOSTS --topic $TOPIC_NAME --describe
kafka-topics.sh --zookeeper $ZK_HOSTS --alter --topic my-first-topic --partitions 5
Retention period - kafka-configs.sh --zookeeper $ZK_HOSTS --alter --entity-type topics --entity-name my-first-topic --add-config retention.ms=259200000
purge using 1min - bin/kafka-configs.sh --zookeeper $ZK_HOSTS --alter --entity-type topics --entity-name my-first-topic --add-config retention.ms=1000
kafka-configs.sh --zookeeper $ZK_HOSTS --alter --entity-type topics --entity-name my-first-topic --add-config retention.ms=259200000

bin/kafka-topics.sh --zookeeper $ZK_HOSTS --describe --topics-with-overrides
get partition offset value - bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic $TOPIC_NAME

The Apache Kafka architecture consists of several key components:

Producers: Producers are client applications that publish messages to a Kafka topic. Producers can be written in any language and can run on any platform.

Topics: Topics are the named channels to which messages are published by producers. Topics are organized into partitions, and each partition contains a sequence of ordered messages.

Partitions: Partitions are the unit of parallelism in a Kafka cluster. Messages within a partition are guaranteed to be ordered, and each partition can be processed by a separate consumer.

Brokers: Brokers are the nodes in the Kafka cluster that store the published messages and serve them to consumers. A broker can have multiple partitions, and each partition can be stored on multiple nodes for reliability and availability.

Zookeeper: Zookeeper is a distributed coordination service that is used to manage the configuration and state of the Kafka cluster. Zookeeper ensures that the cluster is running smoothly and that data is distributed evenly across the brokers.

Consumers: Consumers are client applications that subscribe to one or more topics and receive messages from the broker. Consumers can run on any platform and can be written in any language.

Consumer Groups: Consumers can belong to a consumer group, which allows for parallel processing of messages from a topic. Each partition within a topic is assigned to a single consumer in a consumer group, and each consumer is responsible for processing the messages in its assigned partition.

In summary, the Apache Kafka architecture is a distributed system that consists of producers, topics, partitions, brokers, Zookeeper, consumers, and consumer groups. These components work together to provide a highly scalable, fault-tolerant, and high-performance messaging platform.
